// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Item {
  id   Int    @id @default(autoincrement())
  name String @unique

  prices ItemPrice[]
}

model Enchantment {
  id     Int         @id @default(autoincrement())
  name   String      @unique
  prices ItemPrice[]
}

model Rarity {
  id   Int    @id @default(autoincrement())
  name String @unique

  prices ItemPrice[]
}

model ItemPrice {
  id Int @id @default(autoincrement())

  itemId   Int
  item     Item   @relation(fields: [itemId], references: [id])
  rarityId Int
  rarity   Rarity @relation(fields: [rarityId], references: [id])
  price    Int

  enchantments Enchantment[]

  createdAt DateTime @default(now())
}

model Fixes {
  id   Int    @id @default(autoincrement())
  from String
  to   String
}

model Token {
  id        Int      @id @default(autoincrement())
  key       String
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  requests Request[]
}

model Request {
  id      Int   @id @default(autoincrement())
  tokenId Int
  token   Token @relation(fields: [tokenId], references: [id])

  createdAt DateTime @default(now())
}

model User {
  id       String    @id
  isAdmin  Boolean   @default(false)
  githubId Int
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
